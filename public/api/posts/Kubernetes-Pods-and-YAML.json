{
  "title": "Kubernetes Pods and YAML",
  "date": "2025-06-01",
  "category": [
    "Technology"
  ],
  "cover": "/images/blog/blog-image-8.jpg",
  "thumb": "/images/blog/sm/blog-image-8.jpg",
  "content": "\nIn Kubernetes, a **Pod** is the smallest deployable unit. As Kubernetes docs describe, _“A Pod is a group of one or more containers, with shared storage and network resources... A Pod’s contents are always co-located and co-scheduled, and run in a shared context”_. You typically run one container per Pod (though multiple tightly-coupled containers can share a Pod).\n\n##### Pod Manifest Example\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod\nspec:\n  containers:\n    - name: nginx-container\n      image: nginx:1.14.2\n      ports:\n        - containerPort: 80\n```\n\nThis YAML defines a Pod named `nginx-pod` that runs a single container from the `nginx:1.14.2` image. You apply it with `kubectl apply -f pod.yaml`.\n\n##### Usage Notes\n\n- **One container per Pod:** Most applications follow “one-container-per-Pod”; Kubernetes then manages scaling and recreation of Pods.\n- **Sharing:** If you do use multiple containers in a Pod, they share network (localhost) and volumes (for inter-process communication).\n- **Commands:** Use `kubectl create -f pod.yaml` or `kubectl apply -f pod.yaml`. Check status with `kubectl get pods`.\n\nPods run on nodes in the cluster (which must have a container runtime installed). The shared context of a Pod is defined by namespaces and cgroups, isolating it from other Pods. For production, Pods are typically managed by higher-level controllers (Deployments, ReplicaSets). For more, see the [Kubernetes Pods documentation](https://kubernetes.io/docs/concepts/workloads/pods/).\n\n**References:** The official K8s docs explain Pods as “smallest deployable units” grouping one or more containers.\n",
  "slug": "Kubernetes-Pods-and-YAML"
}